//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NSGTransportManagement.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NSGTransportManagementEntities : DbContext
    {
        public NSGTransportManagementEntities()
            : base("name=NSGTransportManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CoreBus> CoreBus { get; set; }
        public virtual DbSet<CoreBusRoute> CoreBusRoutes { get; set; }
        public virtual DbSet<CoreBusRouteSchool> CoreBusRouteSchools { get; set; }
        public virtual DbSet<CoreCity> CoreCities { get; set; }
        public virtual DbSet<CoreIdentityType> CoreIdentityTypes { get; set; }
        public virtual DbSet<CoreQuarterType> CoreQuarterTypes { get; set; }
        public virtual DbSet<CoreRank> CoreRanks { get; set; }
        public virtual DbSet<CoreRelationship> CoreRelationships { get; set; }
        public virtual DbSet<CoreSchool> CoreSchools { get; set; }
        public virtual DbSet<CoreState> CoreStates { get; set; }
        public virtual DbSet<CoreUnit> CoreUnits { get; set; }
        public virtual DbSet<CoreUser> CoreUsers { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<NSGEmployee> NSGEmployees { get; set; }
        public virtual DbSet<NSGStudentDocument> NSGStudentDocuments { get; set; }
        public virtual DbSet<CoreBusRouteDetail> CoreBusRouteDetails { get; set; }
        public virtual DbSet<NSGStudent> NSGStudents { get; set; }
        public virtual DbSet<StudentPassDetailView> StudentPassDetailViews { get; set; }
    
        public virtual ObjectResult<SchoolDetailsGet_Result> SchoolDetailsGet(string schoolName, string routeNumber)
        {
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var routeNumberParameter = routeNumber != null ?
                new ObjectParameter("RouteNumber", routeNumber) :
                new ObjectParameter("RouteNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SchoolDetailsGet_Result>("SchoolDetailsGet", schoolNameParameter, routeNumberParameter);
        }
    
        public virtual ObjectResult<BusRouteDetailsGet_Result> BusRouteDetailsGet(string registrationNumber, string routeNumber, string schoolName, Nullable<int> routeID)
        {
            var registrationNumberParameter = registrationNumber != null ?
                new ObjectParameter("RegistrationNumber", registrationNumber) :
                new ObjectParameter("RegistrationNumber", typeof(string));
    
            var routeNumberParameter = routeNumber != null ?
                new ObjectParameter("RouteNumber", routeNumber) :
                new ObjectParameter("RouteNumber", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BusRouteDetailsGet_Result>("BusRouteDetailsGet", registrationNumberParameter, routeNumberParameter, schoolNameParameter, routeIDParameter);
        }
    
        public virtual ObjectResult<BusRouteSchoolsGet_Result> BusRouteSchoolsGet(Nullable<int> routeID)
        {
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BusRouteSchoolsGet_Result>("BusRouteSchoolsGet", routeIDParameter);
        }
    
        public virtual ObjectResult<BusPickupPointsGet_Result> BusPickupPointsGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BusPickupPointsGet_Result>("BusPickupPointsGet");
        }
    
        public virtual ObjectResult<BusDetailsGet_Result> BusDetailsGet(string registrationNumber, string routeNumber, string schoolName, Nullable<int> routeID)
        {
            var registrationNumberParameter = registrationNumber != null ?
                new ObjectParameter("RegistrationNumber", registrationNumber) :
                new ObjectParameter("RegistrationNumber", typeof(string));
    
            var routeNumberParameter = routeNumber != null ?
                new ObjectParameter("RouteNumber", routeNumber) :
                new ObjectParameter("RouteNumber", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BusDetailsGet_Result>("BusDetailsGet", registrationNumberParameter, routeNumberParameter, schoolNameParameter, routeIDParameter);
        }
    
        public virtual ObjectResult<PassHolderDetailsGet_Result> PassHolderDetailsGet(Nullable<System.DateTime> issueDate, Nullable<System.DateTime> expiryDate, Nullable<long> studenPassID, string studentName, string schoolName, Nullable<bool> activeOnly)
        {
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var studenPassIDParameter = studenPassID.HasValue ?
                new ObjectParameter("StudenPassID", studenPassID) :
                new ObjectParameter("StudenPassID", typeof(long));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var activeOnlyParameter = activeOnly.HasValue ?
                new ObjectParameter("ActiveOnly", activeOnly) :
                new ObjectParameter("ActiveOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PassHolderDetailsGet_Result>("PassHolderDetailsGet", issueDateParameter, expiryDateParameter, studenPassIDParameter, studentNameParameter, schoolNameParameter, activeOnlyParameter);
        }
    }
}
